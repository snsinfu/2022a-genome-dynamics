#!/usr/bin/env python

#
# Output format:
#
# chain   start         end         A          B          tags
# <chain> <coord_start> <coord_end> <A_weight> <B_weight> <tags>
#
# tags:
#   A    - A-type region
#   u    - u-type region
#   B    - B-type region
#   L1   - LINE L1 region
#   cen  - Centromere
#   anor - Active rDNA
#   bnor - Silenced rDNA
#

import argparse
import math
import os
import signal
import sys

import numpy as np
import pandas as pd


# Ordered name of standard autosomes.
STANDARD_AUTOSOMES = [f"chr{n}" for n in range(1, 23)]

# Haploid chromosome chains bearing active NOR.
STANDARD_ACTIVE_NORS = {"chr13:a", "chr14:a", "chr15:a", "chr21:a", "chr22:a"}

AB_WINDOW = 10
AB_CRITERION = "decay_1"
AB_CRITERION_SIGN = +1
AB_THRESHOLD_ZSCORES = [-0.5, 0.5]

LINE1_WINDOW = 10
LINE1_THRESHOLD_QUANTILE = 0.75

GENOMIC_ANNOTATION_COLUMNS = ["chrom", "start", "end", "GC", "L1", "tags"]
CHROMATIN_SIGNAL_COLUMNS = ["chrom", "start", "end", "D1", "D2", "D3", "I1", "I2", "I3"]


def main():
    run(**parse_args())


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-o",
        dest="outfile",
        type=str,
        default=None,
        help="output file name (default: stdout)",
    )

    parser.add_argument(
        "--Xa",
        dest="use_xa",
        action="store_true",
        default=False,
        help="use activated X chromosome",
    )

    parser.add_argument(
        "--Xi",
        dest="use_xi",
        action="store_true",
        default=False,
        help="use inactivated X chromosome",
    )

    parser.add_argument(
        "--Y",
        dest="use_y",
        action="store_true",
        default=False,
        help="use Y chromosome",
    )

    parser.add_argument(
        "annotfile",
        type=str,
        help="input genome annotation file",
    )

    parser.add_argument(
        "signalfile",
        type=str,
        help="input chromatin signal file",
    )

    return vars(parser.parse_args())


def run(*, annotfile, signalfile, outfile, **kwargs):
    if outfile is None:
        output_file = sys.stdout
    else:
        output_file = open(outfile, "w")

    annot_table = pd.read_csv(annotfile, sep="\t")
    assert list(annot_table.columns) == GENOMIC_ANNOTATION_COLUMNS

    signal_table = pd.read_csv(signalfile, sep="\t")
    assert list(signal_table.columns) == CHROMATIN_SIGNAL_COLUMNS

    output_file.write("chain\tstart\tend\tA\tB\ttags\n")

    beads = make_quantized_beads(annot_table, signal_table, **kwargs)
    for chain, start, end, a, b, tags in beads:
        tags = ",".join(tags)
        output_file.write(f"{chain}\t{start}\t{end}\t{a:g}\t{b:g}\t{tags}\n")



def smoothout_feature(table, name, window):
    smooth_tracks = []
    for _, track in table[name].groupby(table.chrom, sort=False):
        smooth_tracks.append(track.rolling(window, center=True, min_periods=1).mean())
    table[name] = np.concatenate(smooth_tracks)


def make_quantized_beads(annot_table, signal_table, *, use_xa, use_xi, use_y):
    # Use robust-standardized signal for the contact decay signal.
    score_table = pd.DataFrame({
        "chrom": signal_table.chrom,
        "score": AB_CRITERION_SIGN * standardize(signal_table[AB_CRITERION]),
    })

    # Use smoothed threshold for the LINE1 signal.
    annot_table.L1.replace(0, np.nan, inplace=True)
    smoothout_feature(annot_table, name="L1", window=LINE1_WINDOW)
    line1_threshold = annot_table.L1.quantile(LINE1_THRESHOLD_QUANTILE)


    def determine_b_factor(score, tags):
        # Use threshold-based quantization into [0,1].
        if not math.isnan(score):
            level = 0
            for i, th in enumerate(AB_THRESHOLD_ZSCORES):
                if score >= th:
                    level = i + 1
            return level / len(AB_THRESHOLD_ZSCORES)

        # Below are heuristics for data-missing regions.

        # Assumption: Centromere is completely B.
        if "cen" in tags:
            return 1

        # Assumption: Active/silent NOR is completely A/B.
        if "anor" in tags:
            return 0
        if "bnor" in tags:
            return 1

        # Last resort: Use cytogenic tags; heterochromatins are B, others are A.
        return 1 if "het" in tags else 0


    def determine_parameters(chain_name, annot, score):
        tags = list(set(annot.tags.split(",")))

        if annot.L1 > line1_threshold:
            tags.append("L1")

        # Annotate active NOR as anor.
        if "nor" in tags:
            tags.remove("nor")
            if chain_name in STANDARD_ACTIVE_NORS:
                tags.append("anor")
            else:
                tags.append("bnor")

        if chain_name == "chrX:b":
            # Special case: Secondary chrX is silenced and thus completely B-type.
            a = 0
            b = 1
        else:
            b = determine_b_factor(score, tags)
            a = 1 - b

        # Tags contain "het" and "eu" inherited from cytogenic annotation.
        if "het" in tags:
            tags.remove("het")
        if "eu" in tags:
            tags.remove("eu")

        if a > b:
            tags.insert(0, "A")
        if b > a:
            tags.insert(0, "B")
        if a == b:
            tags.insert(0, "u")

        return a, b, tags


    def define_beads(chrom, flavor, derive_xa=False):
        chain_name = f"{chrom}:{flavor}"
        annot_track = annot_table[annot_table.chrom == chrom]
        score_track = score_table[score_table.chrom == chrom]["score"]

        if derive_xa:
            derive_xa()

        for i in range(annot_track.shape[0]):
            score = score_track.iloc[i]
            annot = annot_track.iloc[i]
            a, b, tags = determine_parameters(chain_name, annot, score)
            yield chain_name, annot.start, annot.end, a, b, tags


    # Diploid chains:
    #   chr1:a, chr2:a, ..., chr22:a, chrX:a,
    #   chr1:b, chr2:b, ..., chr22:b, chrX:b (chrY:b)

    for chrom in STANDARD_AUTOSOMES:
        yield from define_beads(chrom, flavor="a")

    if use_xa:
        yield from define_beads("chrX", flavor="a", derive_xa=(use_xa and use_xi))

    for chrom in STANDARD_AUTOSOMES:
        yield from define_beads(chrom, flavor="b")

    if use_xi:
        yield from define_beads("chrX", flavor="b")

    if use_y:
        yield from define_beads("chrY", flavor="b")


def standardize(signal):
    robust_center = np.nanmedian(signal)
    robust_deviation = np.nanmedian(np.abs(signal - robust_center)) * 1.4826
    return (signal - robust_center) / robust_deviation


if __name__ == "__main__":
    # Handle signals to make this script behave properly in shell.
    try:
        main()
    except KeyboardInterrupt:
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        os.kill(os.getpid(), signal.SIGINT)
    except BrokenPipeError:
        signal.signal(signal.SIGPIPE, signal.SIG_DFL)
        os.kill(os.getpid(), signal.SIGPIPE)
